<% layout('layouts/boilerplate')%>
<link rel="stylesheet" href="/stylesheets/home.css" />
<main>
  <div
    class="d-flex w-100 flex-column justify-content-center align-items-center vh-home-calc text-white"
  >
    <p class="main-paragraph">Discover the world</p>
    <h1>Travelio</h1>

    <a href="/hotels" class="btn gradient button text-white" id="rainbow-button"
      >View Our Hotels</a
    >
  </div>
</main>
<script>
  const rainbowColors = [
    "hsl(192deg, 100%, 45%)", // blue
    "hsl(211.1, 87.6%, 38%)", // indigo
    "hsl(298, 84.6%, 59.2%)", // violet
  ];
  const paletteSize = rainbowColors.length;
  // Number of milliseconds for each update
  const intervalDelay = 1000;
  const colorNames = [
    "--magic-rainbow-color-0",
    "--magic-rainbow-color-1",
    "--magic-rainbow-color-2",
  ];
  // Register properties
  colorNames.forEach((name, index) => {
    CSS.registerProperty({
      name,
      syntax: "<color>",
      inherits: false,
      initialValue: rainbowColors[index],
    });
  });
  const buttonElem = document.querySelector("#rainbow-button");
  let cycleIndex = 0;
  window.setInterval(() => {
    // Shift every color up by one position.
    //
    // `% paletteSize` is a handy trick to ensure
    // that values "wrap around"; if we've exceeded
    // the number of items in the array, it loops
    // back to 0.
    const nextColors = [
      rainbowColors[(cycleIndex + 1) % paletteSize],
      rainbowColors[(cycleIndex + 2) % paletteSize],
      rainbowColors[(cycleIndex + 3) % paletteSize],
    ];
    // Apply these new colors, update the DOM.
    colorNames.forEach((name, index) => {
      buttonElem.style.setProperty(name, nextColors[index]);
    });
    // increment the cycle count, so that we advance
    // the colors in the next loop.
    cycleIndex++;
  }, intervalDelay);
</script>
